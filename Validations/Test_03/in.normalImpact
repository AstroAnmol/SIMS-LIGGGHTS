### Static Packing
###
### 
###
### This simulation is an attempt to establish a faster way of settling 
### particles in a simulation domain. This is used as a starting file for other simulations
### 
### 
###
### Particle pos/vel are obtained at each timestep for visualization
### purposes, along with sequential images of the cad model. 
###
###
### Eric updates beginning march 2020
### in.init.txt
###
### Particle initialization for  LMS Large Medium Small Particle Layering

### Initialization

## Preliminaries

units 	si
atom_style 	granular

# the product of the processors must equal P, the number of processors used when running the file: mpirun -np 4 ...
processors 	1 1 1

# periodic x boundaries, fixed y boundaries, fixed -z for floor and fixed shrink wrap for cieling
boundary 	p f fm

#LIGGGHTS-Public shouuld produce the same answers for any newton flag setting, besides round off
newton 	off

# communicate single - each processor acquires informaton for ghost patroms within a single distance of its sub domain - the default
# vel yes - communicate velocity info with ghost atoms
communicate 	single vel yes

hard_particles no

#read_restart	restart.static

## Declare domain

# -x +x -y +y -z +z : 2cm x, 1.11m y, 40cm z
# reg is the name of the region, block is the region type, unitx box means definie in box units instead of lattice
region	reg block -1.0 1.0 0.0 100.0 0.0 2.0 units box

# create_box creates a simulation box based on the specified region
# N = 3, number of atom types used in the simulation
create_box	 1 reg

# neighbor skin style - atom pairs within a neighbor cutoff distance = force cutoff + skin distance, styele = bin
neighbor	 0.0625 bin	 # 1 mm, CHECK ON THIS / ASK TOM

# neigh_modify delay 0, this is the default, rebuild neighbor list every timestep
neigh_modify delay 0

## Material Property variables
#variable restiv equal 0.0
variable static_fric equal 0.3
variable rolling_fric equal 0
variable visc_damp equal 0
variable k_c equal 0
## Material properties
fix            m1 all property/global youngsModulus peratomtype 5e6
fix            m2 all property/global poissonsRatio peratomtype 0.3
#fix m3 all property/global coefficientRestitution peratomtypepair 1 ${restiv}
fix            m4 all property/global coefficientFriction peratomtypepair 1 ${static_fric}
fix            m5 all property/global characteristicVelocity scalar .01
fix            m6 all property/global cohesionEnergyDensity peratomtypepair 1 ${k_c}
fix	       m7 all property/global coefficientRollingFriction peratomtypepair 1 ${rolling_fric}
fix	       m8 all property/global coefficientRollingViscousDamping peratomtypepair 1 ${visc_damp}

## Pair style
pair_style	gran model hertz tangential history cohesion sjkr rolling_friction epsd torsionTorque on
pair_coeff	* *  # the asterisks set force field coeefficients for all atom types, but then no other args? ASK TOM

# timestep is 50 ns CHECK THIS
timestep	0.00005
variable	tstep equal 0.000005

# conserved - NVE - number, volume, and energy. the sum of KE and PE is conserved, T and P are unregulated
fix		1 all nve/sphere

# moon gravity defined in -z vector
#fix		2 all gravity 9.81 vector 0.0 0.0 -1.0  

## Thermo settings
# thermo style custom says what thermo data we want printed at each thermo timestep - timestep, num atoms, kinetic energy, volume
thermo_style 	custom step atoms ke vol
# thermo output every 1000 timesteps
thermo		10000
# LIGGGHTS will ignore last particles and will not normalize against num atoms
thermo_modify	lost ignore norm no

## box walls - define simulation
# we do not need x walls since the bc are periodic
# place y walls at front and back of sim. later, front wall will be unfixed/refixed and given a velocity for a fewe timesteps, then set back to fixed wall - this is in place of Carlos' mesh wall. May need mesh wall later for partial wall impact
# place one z wall on the floor

fix		wall_y1 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 1 yplane 0.0 	# wall moves later
fix		wall_y2 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 1 yplane 100.0 	# "endcap"
fix		wall_z1 all wall/gran model hertz tangential history cohesion sjkr rolling_friction epsd primitive type 1 zplane 0 		# floor
#fix             cad1 all mesh/surface file meshes/square_wall_45cm_3cmthick.stl type 2 scale .00099 move 0.01 0.45 -0.03 rotate axis 1. 0. 0. angle 90.

# particles and their distribution
# insert two particles, aligned in x and z but offset in y
create_atoms 1 single 0.0 50.0 1.0
create_atoms 1 single 0.0 60.0 1.0 

# set atom velocities to be equal and opposite
set atom 1 vx 0.0 vy 10.0 vz 0.0 
set atom 2 vx 0.0 vy -10.0 vz 0.0

fix ts_check all check/timestep/gran 100 0.1 0.1

# define output
# define loops
label	loop
variable	r loop 6 100 # 100

## compute the array of overlaps, which will contain p-id 1, p-id 2, and their overlap [m]
#compute deltas all pair/gran/local id delta

# define output - t=0 and t=end
dump dmp all custom 30000 post_eric/rest_$r_*.post id type x y z vx vy vz radius fx fy fz mass omegax omegay omegaz tqx tqy tqz
#dump dmp_local all local 1000 post_computes/dump_$r_computes*.post c_deltas[1] c_deltas[2] c_deltas[4]

# calculate restitution
variable restiv equal (${r})/100
print	"Restitution coefficient = ${restiv}"


# reset initial position and velocity
#create_atoms 1 single 0.0 50.0 0.0
#create_atoms 2 single 0.0 60.0 0.0

#set atom 1 x 0.0 y 50.0 z 0.0
#set atom 2 x 0.0 y 60.0 z 0.0

group v1 id 1
group v2 id 2

# for some reason, setting the positions in the way above (set atom atomID) changes the forces to NaN
# need to use setting velocites by group instead 
set group v1 y 50.0
set group v2 y 60.0

set group v1 vx 0.0 vy 10.0 vz 0.0
set group v2 vx 0.0 vy -10.0 vz 0.0
#velocity v1 set 0.0 10.0 0.0 loop all
#velocity v2 set 0.0 -10.0 0.0 loop all

fix m3 all property/global coefficientRestitution peratomtypepair 1 ${restiv}

reset_timestep 0
run	30000
unfix	m3	
next r
undump	dmp
#undump dmp_local
#uncompute deltas
jump in.normalImpact loop




